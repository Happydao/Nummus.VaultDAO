name: Monitor Vault + Swap Events

on:
  schedule:
    - cron: '0 * * * *'  # Esegui ogni ora
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    env:
      HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Fetch balances and transactions
        run: |
          mkdir -p data

          WALLET1="AoXJQjDcK7C28ecdNVQjGjXW8V6nxR7NY7rBFhdhUc5B"
          WALLET2="HtT3yMsAavLQYmd6VSbXSdbAefyZUrrFeEPoTPivde3s"
          MINT_TBTC="6DNSN2BJsaPFdFFc1zP37kkeNe4Usc1Sqkzr9C9vPWcU"
          API_RPC="https://mainnet.helius-rpc.com/?api-key=$HELIUS_API_KEY"

          get_balance() {
            local WALLET=$1
            curl -s -X POST "$API_RPC" -H "Content-Type: application/json" -d '{
              "jsonrpc":"2.0",
              "id":"1",
              "method":"getAssetsByOwner",
              "params":{
                "ownerAddress":"'"$WALLET"'",
                "page":1,
                "limit":1000,
                "options":{"showFungible":true,"showZeroBalance":false}
              }
            }' | jq -r --arg M "$MINT_TBTC" '
              .result.items[]? | select(.id == $M) |
              {bal: (.token_info.balance | tonumber), dec: (.token_info.decimals | tonumber)} |
              "\(.bal) \(.dec)"' | awk '{ printf "%.8f", $1 / (10 ^ $2) }'
          }

          TBTC_BAL_W1=$(get_balance "$WALLET1")
          TBTC_BAL_W2=$(get_balance "$WALLET2")

          fetch_transactions() {
            local WALLET=$1
            local ALL_TXS="[]"
            local LAST_SIG=""
            for i in {1..5}; do
              if [ -z "$LAST_SIG" ]; then
                PAGE=$(curl -s "https://api.helius.xyz/v0/addresses/$WALLET/transactions?api-key=$HELIUS_API_KEY&limit=100")
              else
                PAGE=$(curl -s "https://api.helius.xyz/v0/addresses/$WALLET/transactions?api-key=$HELIUS_API_KEY&limit=100&before=$LAST_SIG")
              fi
              ALL_TXS=$(jq -s 'add' <<< "$ALL_TXS $PAGE")
              LAST_SIG=$(echo "$PAGE" | jq -r '.[-1].signature // empty')
              [ -z "$LAST_SIG" ] && break
            done
            echo "$ALL_TXS"
          }

          XFERS_W1=$(fetch_transactions "$WALLET1")
          XFERS_W2=$(fetch_transactions "$WALLET2")

          # 🔁 Unisci i log per osservare tutto il traffico verso wallet 2
          COMBINED_TXS=$(jq -s 'add' <<< "$XFERS_W1 $XFERS_W2")

          echo "$XFERS_W1" > data/raw_wallet1.json
          echo "$XFERS_W2" > data/raw_wallet2.json
          echo "$COMBINED_TXS" | jq '.[0:20] | map({signature, timestamp, tokenTransfers})' > data/debug_wallet2_transfers.json

          # === Filtra tBTC Transfers da COMBINED verso wallet 2 ===
          TBTC_TO_W2=$(echo "$COMBINED_TXS" | jq -c --arg M "$MINT_TBTC" --arg W "$WALLET2" '
            [ .[]
              | select(.tokenTransfers != null)
              | . as $tx
              | $tx.tokenTransfers[]
              | select(.mint == $M and ((.toUserAccount // "") == $W or (.fromUserAccount // "") == $W))
              | {
                  timestamp: ($tx.timestamp | todateiso8601),
                  amount: (
                    if (.toUserAccount // "") == $W then
                      "+" + (.tokenAmount | tostring)
                    else
                      "-" + (.tokenAmount | tostring)
                    end
                  )
                }
            ] | sort_by(.timestamp) | reverse | .[:30]')

          TBTC_TO_W1=$(echo "$XFERS_W1" | jq -c --arg M "$MINT_TBTC" --arg W "$WALLET1" '
            [ .[]
              | select(.tokenTransfers != null)
              | . as $tx
              | $tx.tokenTransfers[]
              | select(.mint == $M and ((.toUserAccount // "") == $W or (.fromUserAccount // "") == $W))
              | {
                  timestamp: ($tx.timestamp | todateiso8601),
                  amount: (
                    if (.toUserAccount // "") == $W then
                      "+" + (.tokenAmount | tostring)
                    else
                      "-" + (.tokenAmount | tostring)
                    end
                  )
                }
            ] | sort_by(.timestamp) | reverse | .[:30]')

          # === Salva status.json ===
          jq -n \
            --arg tbtc1 "$TBTC_BAL_W1" \
            --argjson last1 "$TBTC_TO_W1" \
            --arg tbtc2 "$TBTC_BAL_W2" \
            --argjson last2 "$TBTC_TO_W2" \
            --arg time "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '{
              wallet_1: {
                tbtc_balance: $tbtc1,
                last_tbtc_transfers: $last1
              },
              vault_wallet_2: {
                tbtc_balance: $tbtc2,
                last_tbtc_transfers: $last2
              },
              timestamp: $time
            }' > data/status.json

      - name: Commit if changed
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git diff --quiet || (git add data/*.json && git commit -m "Update: latest tBTC transfers" && git push)
