name: Monitor Vault + Swap Events

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    env:
      HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Fetch balances, txs & prices
        run: |
          mkdir -p data

          WALLET1="AoXJQjDcK7C28ecdNVQjGjXW8V6nxR7NY7rBFhdhUc5B"
          WALLET2="HtT3yMsAavLQYmd6VSbXSdbAefyZUrrFeEPoTPivde3s"
          MINT_TBTC="6DNSN2BJsaPFdFFc1zP37kkeNe4Usc1Sqkzr9C9vPWcU"
          API_RPC="https://mainnet.helius-rpc.com/?api-key=$HELIUS_API_KEY"

          # --- Fetch balances ---
          get_balance() {
            local WALLET=$1
            curl -s -X POST "$API_RPC" \
              -H "Content-Type: application/json" \
              -d '{
                "jsonrpc":"2.0","id":"1","method":"getAssetsByOwner",
                "params":{"ownerAddress":"'"$WALLET"'","page":1,"limit":1000,
                "options":{"showFungible":true,"showZeroBalance":false}}
              }' | jq -r --arg M "$MINT_TBTC" '
                .result.items[]? | select(.id == $M) |
                {bal: (.token_info.balance | tonumber), dec: (.token_info.decimals | tonumber)} |
                "\(.bal) \(.dec)"' | awk '{ printf "%.8f", $1 / (10 ^ $2) }'
          }

          TBTC_BAL_W1=$(get_balance "$WALLET1")
          TBTC_BAL_W2=$(get_balance "$WALLET2")

          # --- Fetch transactions (up to 500 per wallet) ---
          fetch_tx() {
            local WALLET=$1
            local ALL="[]"; local LAST=""
            for i in {1..5}; do
              if [ -z "$LAST" ]; then
                PAGE=$(curl -s "https://api.helius.xyz/v0/addresses/$WALLET/transactions?api-key=$HELIUS_API_KEY&limit=100")
              else
                PAGE=$(curl -s "https://api.helius.xyz/v0/addresses/$WALLET/transactions?api-key=$HELIUS_API_KEY&limit=100&before=$LAST")
              fi
              ALL=$(jq -s 'add' <<< "$ALL $PAGE")
              LAST=$(echo "$PAGE" | jq -r '.[-1].signature // ""')
              [ -z "$LAST" ] && break
            done
            echo "$ALL"
          }

          XF1=$(fetch_tx "$WALLET1")
          XF2=$(fetch_tx "$WALLET2")

          XF1=$(echo "$XF1" | jq 'unique_by(.signature)')
          XF2=$(echo "$XF2" | jq 'unique_by(.signature)')

          echo "$XF1" > data/raw_wallet1.json
          echo "$XF2" > data/raw_wallet2.json

          echo "$XF1" | jq '.[0:10] | map({signature, timestamp, tokenTransfers})' > data/debug_wallet1_transfers.json
          echo "$XF2" | jq '.[0:10] | map({signature, timestamp, tokenTransfers})' > data/debug_wallet2_transfers.json

          # --- Filter tBTC transfers per wallet ---
          parse() {
            local DATA="$1"; local W="$2"
            echo "$DATA" | jq -c --arg M "$MINT_TBTC" --arg W "$W" '
              [ .[]
                | select(.tokenTransfers != null)
                | . as $tx
                | $tx.tokenTransfers[]
                | select(.mint == $M and ((.toUserAccount // "") == $W or (.fromUserAccount // "") == $W))
                | {
                    signature: $tx.signature,
                    key: (.mint + "_" + (.tokenAmount|tostring) + "_" + ($tx.signature)),
                    timestamp: ($tx.timestamp | todateiso8601),
                    amount: (if (.toUserAccount // "") == $W then "+" + (.tokenAmount|tostring) else "-" + (.tokenAmount|tostring) end)
                }
              ] | unique_by(.key) | map({timestamp, amount}) | sort_by(.timestamp) | reverse | .[:30]'
          }

          TX_W1=$(parse "$XF1" "$WALLET1")
          MERGED=$(jq -s 'add' <<< "$XF1 $XF2")
          TX_W2=$(parse "$MERGED" "$WALLET2")

          # --- Fetch prices ---
          PRICES=$(curl -s "https://api.coingecko.com/api/v3/simple/price?ids=tbtc,nummus-aeternitas&vs_currencies=usd")
          TBTC_P=$(echo "$PRICES" | jq -r '.tbtc.usd // 0')
          NUM_P=$(echo "$PRICES" | jq -r '.["nummus-aeternitas"].usd // 0')

          # --- Save prices ---
          jq -n \
            --arg time "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --argjson tbtc "$TBTC_P" \
            --argjson nummus "$NUM_P" \
            '{
              timestamp: $time,
              tbtc_usd: $tbtc,
              nummus_usd: $nummus
            }' > data/prices.json

          # --- Calculate USD values of wallet tBTC holdings ---
          VAL1=$(awk "BEGIN { printf \"%.2f\", $TBTC_BAL_W1 * $TBTC_P }")
          VAL2=$(awk "BEGIN { printf \"%.2f\", $TBTC_BAL_W2 * $TBTC_P }")

          jq -n \
            --arg tbtc1 "$TBTC_BAL_W1" \
            --argjson val1 "$VAL1" \
            --argjson last1 "$TX_W1" \
            --arg tbtc2 "$TBTC_BAL_W2" \
            --argjson val2 "$VAL2" \
            --argjson last2 "$TX_W2" \
            --arg time "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '{
              wallet_1: {
                tbtc_balance: $tbtc1,
                tbtc_usd_value: $val1,
                last_tbtc_transfers: $last1
              },
              vault_wallet_2: {
                tbtc_balance: $tbtc2,
                tbtc_usd_value: $val2,
                last_tbtc_transfers: $last2
              },
              timestamp: $time
            }' > data/status.json

      - name: Commit if changed
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git diff --quiet || (git add data/*.json && git commit -m "Update balances, transfers & prices" && git push)
