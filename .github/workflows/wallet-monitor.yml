name: Monitor Vault + Swap Events

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    env:
      HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Fetch balances, prices, and transactions
        run: |
          mkdir -p data

          WALLET1="AoXJQjDcK7C28ecdNVQjGjXW8V6nxR7NY7rBFhdhUc5B"
          WALLET2="HtT3yMsAavLQYmd6VSbXSdbAefyZUrrFeEPoTPivde3s"
          MINT_TBTC="6DNSN2BJsaPFdFFc1zP37kkeNe4Usc1Sqkzr9C9vPWcU"
          API_RPC="https://mainnet.helius-rpc.com/?api-key=$HELIUS_API_KEY"

          get_balance() {
            local WALLET=$1
            curl -s -X POST "$API_RPC" -H "Content-Type: application/json" -d '{
              "jsonrpc":"2.0","id":"1","method":"getAssetsByOwner",
              "params":{"ownerAddress":"'"$WALLET"'","page":1,"limit":1000,
              "options":{"showFungible":true,"showZeroBalance":false}}
            }' | jq -r --arg M "$MINT_TBTC" '
              .result.items[]? | select(.id == $M) |
              {bal: (.token_info.balance | tonumber), dec: (.token_info.decimals | tonumber)} |
              "\(.bal) \(.dec)"' | awk '{ printf "%.8f", $1 / (10 ^ $2) }'
          }

          TBTC_BAL_W1=$(get_balance "$WALLET1")
          TBTC_BAL_W2=$(get_balance "$WALLET2")

          fetch_transactions() {
            local WALLET=$1
            local ALL_TXS="[]"
            local LAST_SIG=""
            for i in {1..5}; do
              if [ -z "$LAST_SIG" ]; then
                PAGE=$(curl -s "https://api.helius.xyz/v0/addresses/$WALLET/transactions?api-key=$HELIUS_API_KEY&limit=100")
              else
                PAGE=$(curl -s "https://api.helius.xyz/v0/addresses/$WALLET/transactions?api-key=$HELIUS_API_KEY&limit=100&before=$LAST_SIG")
              fi
              ALL_TXS=$(jq -s 'add' <<< "$ALL_TXS $PAGE")
              LAST_SIG=$(echo "$PAGE" | jq -r '.[-1].signature // empty')
              [ -z "$LAST_SIG" ] && break
            done
            echo "$ALL_TXS"
          }

          XFERS_W1=$(fetch_transactions "$WALLET1")
          XFERS_W2=$(fetch_transactions "$WALLET2")

          XFERS_W1_DEDUP=$(echo "$XFERS_W1" | jq 'unique_by(.signature)')
          XFERS_W2_DEDUP=$(echo "$XFERS_W2" | jq 'unique_by(.signature)')

          echo "$XFERS_W1_DEDUP" > data/raw_wallet1.json
          echo "$XFERS_W2_DEDUP" > data/raw_wallet2.json

          echo "$XFERS_W1_DEDUP" | jq '.[0:10] | map({signature, timestamp, tokenTransfers})' > data/debug_wallet1_transfers.json
          echo "$XFERS_W2_DEDUP" | jq '.[0:10] | map({signature, timestamp, tokenTransfers})' > data/debug_wallet2_transfers.json

          parse_transfers() {
            local DATA="$1"
            local WALLET="$2"
            local MINT="$3"
            echo "$DATA" | jq -c --arg M "$MINT" --arg W "$WALLET" '
              [ .[]
                | select(.tokenTransfers != null)
                | . as $tx
                | $tx.tokenTransfers[]
                | select(.mint == $M and ((.toUserAccount // "") == $W or (.fromUserAccount // "") == $W))
                | {
                    signature: $tx.signature,
                    timestamp: ($tx.timestamp | todateiso8601),
                    amount: (
                      if (.toUserAccount // "") == $W then
                        "+" + (.tokenAmount | tostring)
                      else
                        "-" + (.tokenAmount | tostring)
                      end
                    )
                  }
              ] | unique_by(.signature) | sort_by(.timestamp) | reverse | .[:30]'
          }

          LAST_TBTC_W1=$(parse_transfers "$XFERS_W1_DEDUP" "$WALLET1" "$MINT_TBTC")
          MERGED_W2=$(jq -s 'add | unique_by(.signature)' <<< "$XFERS_W1_DEDUP $XFERS_W2_DEDUP")
          LAST_TBTC_W2=$(parse_transfers "$MERGED_W2" "$WALLET2" "$MINT_TBTC")

          PRICE_TBTC=$(curl -s "https://api.coingecko.com/api/v3/simple/price?ids=tbtc&vs_currencies=usd" | jq -r '.tbtc.usd // 0')

          VALUE_W1=$(awk "BEGIN {printf \"%.2f\", $TBTC_BAL_W1 * $PRICE_TBTC}")
          VALUE_W2=$(awk "BEGIN {printf \"%.2f\", $TBTC_BAL_W2 * $PRICE_TBTC}")
          TOTAL_TBTC=$(awk "BEGIN {printf \"%.8f\", $TBTC_BAL_W1 + $TBTC_BAL_W2}")
          TOTAL_VALUE=$(awk "BEGIN {printf \"%.2f\", $VALUE_W1 + $VALUE_W2}")

          jq -n \
            --arg tbtc1 "$TBTC_BAL_W1" \
            --argjson last1 "$LAST_TBTC_W1" \
            --arg tbtc2 "$TBTC_BAL_W2" \
            --argjson last2 "$LAST_TBTC_W2" \
            --arg val1 "$VALUE_W1" \
            --arg val2 "$VALUE_W2" \
            --arg time "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '{
              wallet_1: {
                tbtc_balance: ($tbtc1 | tonumber),
                tbtc_usd_value: ($val1 | tonumber),
                last_tbtc_transfers: $last1
              },
              vault_wallet_2: {
                tbtc_balance: ($tbtc2 | tonumber),
                tbtc_usd_value: ($val2 | tonumber),
                last_tbtc_transfers: $last2
              },
              timestamp: $time
            }' > data/status.json

          jq -n \
            --arg price "$PRICE_TBTC" \
            --arg w1_bal "$TBTC_BAL_W1" \
            --arg w1_val "$VALUE_W1" \
            --arg w2_bal "$TBTC_BAL_W2" \
            --arg w2_val "$VALUE_W2" \
            --arg total_bal "$TOTAL_TBTC" \
            --arg total_val "$TOTAL_VALUE" \
            --arg time "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '{
              tbtc_price_usd: ($price | tonumber),
              total_tbtc_balance: ($total_bal | tonumber),
              total_usd_value: ($total_val | tonumber),
              wallet_1: {
                tbtc_balance: ($w1_bal | tonumber),
                tbtc_usd_value: ($w1_val | tonumber)
              },
              wallet_2: {
                tbtc_balance: ($w2_bal | tonumber),
                tbtc_usd_value: ($w2_val | tonumber)
              },
              timestamp: $time
            }' > data/prices.json

      - name: Commit if changed
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git diff --quiet || (git add data/*.json && git commit -m "Update: tBTC data & prices" && git push)
