name: Monitor Vault + Swap Events

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    env:
      HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Fetch balances and transfers
        run: |
          mkdir -p data

          WALLET1="AoXJQjDcK7C28ecdNVQjGjXW8V6nxR7NY7rBFhdhUc5B"
          WALLET2="HtT3yMsAavLQYmd6VSbXSdbAefyZUrrFeEPoTPivde3s"
          MINT_TBTC="6DNSN2BJsaPFdFFc1zP37kkeNe4Usc1Sqkzr9C9vPWcU"
          MINT_NUMMUS="9JK2U7aEkp3tWaFNuaJowWRgNys5DVaKGxWk73VT5ray"

          API="https://mainnet.helius-rpc.com/?api-key=$HELIUS_API_KEY"

          # === 1. TBTC + NUMMUS Balance (Wallet 1) ===
          BALANCE_W1=$(curl -s -X POST "$API" -H "Content-Type: application/json" -d '{
            "jsonrpc":"2.0",
            "id":"1",
            "method":"getAssetsByOwner",
            "params":{
              "ownerAddress":"'$WALLET1'",
              "page":1,
              "limit":1000,
              "options":{"showFungible":true,"showZeroBalance":false}
            }
          }')

          TBTC_BAL_W1=$(echo "$BALANCE_W1" | jq -r --arg M "$MINT_TBTC" '
            .result.items[] | select(.id == $M) |
            {bal: (.token_info.balance | tonumber), dec: (.token_info.decimals | tonumber)} |
            "\(.bal) \(.dec)"' | awk '{ printf "%.8f", $1 / (10 ^ $2) }')

          NUMMUS_BAL_W1=$(echo "$BALANCE_W1" | jq -r --arg M "$MINT_NUMMUS" '
            .result.items[] | select(.id == $M) |
            {bal: (.token_info.balance | tonumber), dec: (.token_info.decimals | tonumber)} |
            "\(.bal) \(.dec)"' | awk '{ printf "%.6f", $1 / (10 ^ $2) }')

          # === 2. TBTC Balance (Vault Wallet 2) ===
          BALANCE_W2=$(curl -s -X POST "$API" -H "Content-Type: application/json" -d '{
            "jsonrpc":"2.0",
            "id":"1",
            "method":"getAssetsByOwner",
            "params":{
              "ownerAddress":"'$WALLET2'",
              "page":1,
              "limit":1000,
              "options":{"showFungible":true,"showZeroBalance":false}
            }
          }')

          TBTC_BAL_W2=$(echo "$BALANCE_W2" | jq -r --arg M "$MINT_TBTC" '
            .result.items[] | select(.id == $M) |
            {bal: (.token_info.balance | tonumber), dec: (.token_info.decimals | tonumber)} |
            "\(.bal) \(.dec)"' | awk '{ printf "%.8f", $1 / (10 ^ $2) }')

          # === 3. Ultime 2 transazioni in entrata di TBTC su Wallet 1 ===
          XFERS_W1=$(curl -s -X GET "https://api.helius.xyz/v0/addresses/$WALLET1/transactions?api-key=$HELIUS_API_KEY&limit=20")

          LAST_TBTC_W1=$(echo "$XFERS_W1" | jq -c --arg M "$MINT_TBTC" --arg W "$WALLET1" '
            map(.tokenTransfers // [] | map(select(.mint == $M and .toUserAccount == $W))) | flatten
            | sort_by(.timestamp) | reverse | .[:2]
            | map({
                amount: (.amount | tostring),
                timestamp: .timestamp
              })')

          # === 4. Ultime 2 transazioni in entrata di TBTC su Wallet 2 ===
          XFERS_W2=$(curl -s -X GET "https://api.helius.xyz/v0/addresses/$WALLET2/transactions?api-key=$HELIUS_API_KEY&limit=20")

          LAST_TBTC_W2=$(echo "$XFERS_W2" | jq -c --arg M "$MINT_TBTC" --arg W "$WALLET2" '
            map(.tokenTransfers // [] | map(select(.mint == $M and .toUserAccount == $W))) | flatten
            | sort_by(.timestamp) | reverse | .[:2]
            | map({
                amount: (.amount | tostring),
                timestamp: .timestamp
              })')

          # === 5. Scrivi JSON finale ===
          cat <<EOF > data/status.json
          {
            "wallet_1": {
              "tbtc_balance": "$TBTC_BAL_W1",
              "numus_balance": "$NUMMUS_BAL_W1",
              "last_tbtc_received": $LAST_TBTC_W1
            },
            "vault_wallet_2": {
              "tbtc_balance": "$TBTC_BAL_W2",
              "last_tbtc_received": $LAST_TBTC_W2
            },
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Commit if changed
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git diff --quiet || (git add data/status.json && git commit -m "Update balances and transfers" && git push)
