name: Monitor Vault + Swap Events

on:
  schedule:
    - cron: '0 * * * *'  # Ogni ora
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    env:
      HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Fetch balances and transactions (2 pages)
        run: |
          mkdir -p data

          WALLET1="AoXJQjDcK7C28ecdNVQjGjXW8V6nxR7NY7rBFhdhUc5B"
          WALLET2="HtT3yMsAavLQYmd6VSbXSdbAefyZUrrFeEPoTPivde3s"
          MINT_TBTC="6DNSN2BJsaPFdFFc1zP37kkeNe4Usc1Sqkzr9C9vPWcU"
          API="https://mainnet.helius-rpc.com/?api-key=$HELIUS_API_KEY"

          # === TBTC BALANCES ===
          get_balance() {
            local WALLET=$1
            curl -s -X POST "$API" -H "Content-Type: application/json" -d '{
              "jsonrpc":"2.0",
              "id":"1",
              "method":"getAssetsByOwner",
              "params":{
                "ownerAddress":"'"$WALLET"'",
                "page":1,
                "limit":1000,
                "options":{"showFungible":true,"showZeroBalance":false}
              }
            }' | jq -r --arg M "$MINT_TBTC" '
              .result.items[]? | select(.id == $M) |
              {bal: (.token_info.balance | tonumber), dec: (.token_info.decimals | tonumber)} |
              "\(.bal) \(.dec)"' | awk '{ printf "%.8f", $1 / (10 ^ $2) }'
          }

          TBTC_BAL_W1=$(get_balance "$WALLET1")
          TBTC_BAL_W2=$(get_balance "$WALLET2")

          # === TRANSACTIONS WITH PAGINATION (2 pages x 100 tx) ===
          fetch_transactions() {
            local WALLET=$1
            local OUT1=$(curl -s "https://api.helius.xyz/v0/addresses/$WALLET/transactions?api-key=$HELIUS_API_KEY&limit=100")
            local SIG=$(echo "$OUT1" | jq -r '.[-1].signature')
            local OUT2=$(curl -s "https://api.helius.xyz/v0/addresses/$WALLET/transactions?api-key=$HELIUS_API_KEY&limit=100&before=$SIG")
            jq -s 'add' <<< "$OUT1 $OUT2"
          }

          XFERS_W1=$(fetch_transactions "$WALLET1")
          XFERS_W2=$(fetch_transactions "$WALLET2")

          echo "$XFERS_W1" | jq '.[0:10] | map({signature, timestamp, tokenTransfers})' > data/debug_wallet1_transfers.json
          echo "$XFERS_W2" | jq '.[0:10] | map({signature, timestamp, tokenTransfers})' > data/debug_wallet2_transfers.json

          # === PARSE LAST 30 TBTC TRANSFERS (IN/OUT) ===
          parse_transfers() {
            local DATA="$1"
            local WALLET="$2"
            local MINT="$3"
            echo "$DATA" | jq -c --arg M "$MINT" --arg W "$WALLET" '
              [ .[]
                | select(.tokenTransfers != null)
                | . as $tx
                | $tx.tokenTransfers[]
                | select(.mint == $M and (.toUserAccount == $W or .fromUserAccount == $W))
                | {
                    timestamp: ($tx.timestamp | todateiso8601),
                    amount: (
                      if .toUserAccount == $W then
                        "+" + (.tokenAmount | tostring)
                      else
                        "-" + (.tokenAmount | tostring)
                      end
                    )
                  }
              ] | sort_by(.timestamp) | reverse | .[:30]'
          }

          LAST_TBTC_W1=$(parse_transfers "$XFERS_W1" "$WALLET1" "$MINT_TBTC")
          LAST_TBTC_W2=$(parse_transfers "$XFERS_W2" "$WALLET2" "$MINT_TBTC")

          # === WRITE STATUS FILE ===
          jq -n \
            --arg tbtc1 "$TBTC_BAL_W1" \
            --argjson last1 "$LAST_TBTC_W1" \
            --arg tbtc2 "$TBTC_BAL_W2" \
            --argjson last2 "$LAST_TBTC_W2" \
            --arg time "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '{
              wallet_1: {
                tbtc_balance: $tbtc1,
                last_tbtc_transfers: $last1
              },
              vault_wallet_2: {
                tbtc_balance: $tbtc2,
                last_tbtc_transfers: $last2
              },
              timestamp: $time
            }' > data/status.json

      - name: Commit if changed
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git diff --quiet || (git add data/*.json && git commit -m "Update: latest tBTC transfers" && git push)
