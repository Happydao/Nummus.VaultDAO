name: Monitor Wallets and Balances

on:
  schedule:
    - cron: '*/5 * * * *'  # ogni 5 minuti
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    env:
      HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq bc curl

      - name: Fetch balances from Helius
        run: |
          mkdir -p data

          API_URL="https://mainnet.helius-rpc.com/?api-key=$HELIUS_API_KEY"
          MINT_TBTC="6DNSN2BJsaPFdFFc1zP37kkeNe4Usc1Sqkzr9C9vPWcU"
          MINT_NUMUS="9JK2U7aEkp3tWaFNuaJowWRgNys5DVaKGxWk73VT5ray"
          WALLET_1="AoXJQjDcK7C28ecdNVQjGjXW8V6nxR7NY7rBFhdhUc5B"
          WALLET_2="HtT3yMsAavLQYmd6VSbXSdbAefyZUrrFeEPoTPivde3s"

          # Funzione per fare la richiesta API
          fetch_assets() {
            WALLET=$1
            curl -s -X POST "$API_URL" \
              -H "Content-Type: application/json" \
              -d '{
                "jsonrpc":"2.0",
                "id":"1",
                "method":"getAssetsByOwner",
                "params":{
                  "ownerAddress":"'"$WALLET"'",
                  "page":1,
                  "limit":1000,
                  "options":{
                    "showFungible":true,
                    "showZeroBalance":false
                  }
                }
              }'
          }

          # Esegui le richieste per entrambi i wallet
          RESP1=$(fetch_assets "$WALLET_1")
          RESP2=$(fetch_assets "$WALLET_2")

          # Salva le risposte per debug
          echo "$RESP1" > data/wallet1_raw.json
          echo "$RESP2" > data/wallet2_raw.json

          # Funzione per estrarre balance di uno specifico mint
          extract_balance() {
            RESPONSE="$1"
            MINT="$2"
            echo "$RESPONSE" | jq -e '.result.items' > /dev/null 2>&1 || { echo "0"; return; }

            echo "$RESPONSE" | jq -r --arg M "$MINT" '
              .result.items[]? | select(.mint == $M) |
              (.ownership.fungible.amount | tonumber) / (10 ^ (.token_info.decimals | tonumber))
            ' 2>/dev/null || echo "0"
          }

          # Estrai i balance da ogni wallet
          TBTC1=$(extract_balance "$RESP1" "$MINT_TBTC")
          TBTC2=$(extract_balance "$RESP2" "$MINT_TBTC")
          NUMUS1=$(extract_balance "$RESP1" "$MINT_NUMUS")

          echo "ðŸ’° NUMUS balance (wallet 1): $NUMUS1"
          echo "ðŸ’° TBTC balance (wallet 1): $TBTC1"
          echo "ðŸ’° TBTC balance (vault):     $TBTC2"

          # Determina lo stato
          STATUS="swap_pending"
          if (( $(echo "$TBTC1 > 0" | bc -l) )); then STATUS="awaiting_transfer"; fi
          if (( $(echo "$TBTC2 > 0" | bc -l) )); then STATUS="transferred"; fi

          # Crea lo status.json finale
          echo "{
            \"status\": \"$STATUS\",
            \"numus_balance\": \"$NUMUS1\",
            \"numus_wallet_tbtc\": \"$TBTC1\",
            \"vault_balance\": \"$TBTC2\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
          }" > data/status.json

      - name: Commit updated status if changed
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git diff --quiet || (git add data/*.json && git commit -m "Update wallet status" && git push)
