name: Monitor Wallets and Balances

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    env:
      HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq bc curl

      - name: Query balances via getAssetsByOwner
        run: |
          mkdir -p data

          API="https://mainnet.helius-rpc.com/?api-key=$HELIUS_API_KEY"
          MINT_TBTC="6DNSN2BJsaPFdFFc1zP37kkeNe4Usc1Sqkzr9C9vPWcU"
          MINT_NUMUS="9JK2U7aEkp3tWaFNuaJowWRgNys5DVaKGxWk73VT5ray"
          W1="AoXJQjDcK7C28ecdNVQjGjXW8V6nxR7NY7rBFhdhUc5B"
          W2="HtT3yMsAavLQYmd6VSbXSdbAefyZUrrFeEPoTPivde3s"

          fetch_assets() {
            WALLET=$1
            curl -s -X POST "$API" \
              -H "Content-Type: application/json" \
              -d '{
                "jsonrpc":"2.0","id":"1","method":"getAssetsByOwner",
                "params":{"ownerAddress":"'"$WALLET"'","page":1,"limit":1000,"options":{"showFungible":true,"showZeroBalance":false}}
              }'
          }

          # Fetch
          RESP1=$(fetch_assets $W1)
          RESP2=$(fetch_assets $W2)

          echo "ðŸ“¦ Wallet 1 response:"
          echo "$RESP1" | jq '.result.items[] | {mint,amount,decimals}' || :

          # Extract balances
          bal() {
            echo "$1" | jq -r --arg M "$2" '
              (.result.items[] | select(.mint == $M) |
                (.amount | tonumber) / (10 ^ (.decimals|tonumber))
              ) // 0
            '
          }

          TBTC1=$(bal "$RESP1" "$MINT_TBTC")
          TBTC2=$(bal "$RESP2" "$MINT_TBTC")
          NUMUS1=$(bal "$RESP1" "$MINT_NUMUS")

          echo "Balances -> TBTC W1=$TBTC1, TBTC W2=$TBTC2, NUMUS W1=$NUMUS1"

          STATUS="swap_pending"
          if (( $(echo "$TBTC1 > 0" | bc -l) )); then STATUS="awaiting_transfer"; fi
          if (( $(echo "$TBTC2 > 0" | bc -l) )); then STATUS="transferred"; fi

          cat <<EOF > data/status.json
          {
            "status":"$STATUS",
            "numus_balance":"$NUMUS1",
            "numus_wallet_tbtc":"$TBTC1",
            "vault_balance":"$TBTC2",
            "timestamp":"$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Commit if changed
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git diff --quiet || (git add data/status.json && git commit -m "Update status" && git push)
